name: Publish Python Package

on:
  push:
    branches: [ main, master ]
    paths:
      - 'pyproject.toml'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Check if version has changed
      id: check
      run: |
        git diff HEAD^ HEAD -- pyproject.toml | grep 'version = '
        if git diff HEAD^ HEAD -- pyproject.toml | grep -q 'version = '; then
          echo "Version change detected"
          VERSION=$(grep -m 1 'version = ' pyproject.toml | sed 's/version = //g' | sed 's/"//g' | sed "s/'//g" | xargs)
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "No version change detected"
          echo "should_publish=false" >> $GITHUB_OUTPUT
        fi

  build-and-publish:
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build and check package
      run: |
        python -m build
        twine check dist/*

    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        name: Release v${{ needs.check-version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
